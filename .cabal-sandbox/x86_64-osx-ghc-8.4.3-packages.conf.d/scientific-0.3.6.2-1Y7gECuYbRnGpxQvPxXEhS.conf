name: scientific
version: 0.3.6.2
id: scientific-0.3.6.2-1Y7gECuYbRnGpxQvPxXEhS
key: scientific-0.3.6.2-1Y7gECuYbRnGpxQvPxXEhS
license: BSD-3-Clause
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
author: Bas van Dijk
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    >>> read "1e1000000000" :: Scientific
    1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
abi: c8c962f34bc6c2a1d3e7db477cc7735c
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
import-dirs: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3/scientific-0.3.6.2-1Y7gECuYbRnGpxQvPxXEhS
library-dirs: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3/scientific-0.3.6.2-1Y7gECuYbRnGpxQvPxXEhS
dynamic-library-dirs: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/lib/x86_64-osx-ghc-8.4.3
data-dir: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/share/x86_64-osx-ghc-8.4.3/scientific-0.3.6.2
hs-libraries: HSscientific-0.3.6.2-1Y7gECuYbRnGpxQvPxXEhS
depends:
    base-4.11.1.0 integer-logarithms-1.0.2.2-5NWBguJdcui1fNVng5frMO
    deepseq-1.4.3.0 text-1.2.3.0 hashable-1.2.7.0-Q2TKVDwk4GBEHmizb4teZ
    primitive-0.6.4.0-39Pwmm1zkQX6bM7xFUT3Jc containers-0.5.11.0
    binary-0.8.5.1 bytestring-0.10.8.2 integer-gmp-1.0.2.0
abi-depends: base-4.11.1.0=9a0c3f2e1a5f37ec204ea9ce61813e50
             integer-logarithms-1.0.2.2-5NWBguJdcui1fNVng5frMO=3e5cbf06487149b4b6512c68bc43a07b
             deepseq-1.4.3.0=ac68a0eb0e9076d20502e3c4e41cc80e
             text-1.2.3.0=e4999674a2720be3fa2c5720023c135b
             hashable-1.2.7.0-Q2TKVDwk4GBEHmizb4teZ=2a5172022c5c12f1c2e8b1c77cdc2a4c
             primitive-0.6.4.0-39Pwmm1zkQX6bM7xFUT3Jc=55c881fff883927ab3036f13ca38b774
             containers-0.5.11.0=381f25bb79d0c96d45f63959e2ea6ae5
             binary-0.8.5.1=ce0745da35171f034032fa27f4e6a4e5
             bytestring-0.10.8.2=27ece5364e672a92207a0848d8a86f1e
             integer-gmp-1.0.2.0=8c626fd1378207a720cb94d8f69aafa2
haddock-interfaces: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.4.3/scientific-0.3.6.2/html/scientific.haddock
haddock-html: /Users/rachelsunderland/Documents/BurgerStacker/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.4.3/scientific-0.3.6.2/html
